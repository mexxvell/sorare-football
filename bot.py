import os
import logging
import threading
import time
import asyncio
from cachetools import TTLCache
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes
)
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
API_URL = "https://api.sorare.com/graphql"
CACHE_TIME = 600  # 10 –º–∏–Ω—É—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
CACHE_MAX_SIZE = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫—ç—à–µ
PING_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
PING_URL = "https://google.com"  # URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–µ–π
players_cache = TTLCache(maxsize=CACHE_MAX_SIZE, ttl=CACHE_TIME)
prices_cache = TTLCache(maxsize=CACHE_MAX_SIZE, ttl=300)  # 5 –º–∏–Ω—É—Ç –¥–ª—è —Ü–µ–Ω

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECT_PLAYER = 1

def self_ping():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç–∞–Ω—Å–∞"""
    while True:
        try:
            response = requests.get(PING_URL, timeout=10)
            if response.status_code == 200:
                logger.info("Self-ping –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ self-ping: {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ self-ping: {str(e)}")
        time.sleep(PING_INTERVAL)

def search_players(name: str) -> list:
    """–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ API Sorare"""
    cached = players_cache.get(name)
    if cached:
        return cached

    query = """
    query SearchPlayers($name: String!) {
        football {
            allPlayers(search: $name) {
                nodes {
                    slug
                    displayName
                }
            }
        }
    }
    """
    
    try:
        response = requests.post(
            API_URL,
            json={"query": query, "variables": {"name": name}},
            timeout=10
        )
        response.raise_for_status()
        
        data = response.json()
        players = data.get("data", {}).get("football", {}).get("allPlayers", {}).get("nodes", [])
        players_cache[name] = players
        return players
        
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤: {e}")
        return []
    except KeyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ API: {e}")
        return []

def get_min_price(slug: str) -> float:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–≥—Ä–æ–∫–∞"""
    cached = prices_cache.get(slug)
    if cached is not None:
        return cached

    query = """
    query GetPlayerCards($slug: String!) {
        football {
            player(slug: $slug) {
                cards(rarities: [limited, rare, super_rare, unique], auctionType: [buyNow]) {
                    nodes {
                        price
                    }
                }
            }
        }
    }
    """
    
    try:
        response = requests.post(
            API_URL,
            json={"query": query, "variables": {"slug": slug}},
            timeout=15
        )
        response.raise_for_status()
        
        data = response.json()
        player_data = data.get("data", {}).get("football", {}).get("player", {})
        
        if not player_data:
            return None
            
        cards = player_data.get("cards", {}).get("nodes", [])
        prices = [float(card["price"]) for card in cards if card.get("price")]
        
        if not prices:
            return None
            
        min_price = min(prices)
        prices_cache[slug] = min_price
        return min_price
        
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω: {e}")
        return None
    except (KeyError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        'üèüÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Sorare Price Bot!\n'
        '–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Messi"):'
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    player_name = update.message.text.strip()
    
    if not player_name:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞")
        return ConversationHandler.END
    
    players = search_players(player_name)
    
    if not players:
        await update.message.reply_text("üîç –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ConversationHandler.END
        
    if len(players) > 1:
        keyboard = [[p["displayName"]] for p in players[:5]]
        reply_markup = ReplyKeyboardMarkup(
            keyboard, 
            one_time_keyboard=True,
            resize_keyboard=True
        )
        await update.message.reply_text(
            "üî¢ –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ:",
            reply_markup=reply_markup
        )
        context.user_data["players"] = players
        return SELECT_PLAYER
        
    return await handle_player_selection(update, context, players[0])

async def handle_player_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, player: dict = None) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞"""
    if not player:
        selected_name = update.message.text
        players = context.user_data.get("players", [])
        player = next((p for p in players if p["displayName"] == selected_name), None)
    
    if not player:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞")
        return ConversationHandler.END
        
    try:
        min_price = get_min_price(player["slug"])
        
        if min_price is None:
            response_text = f"‚ÑπÔ∏è –£ {player['displayName']} –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –ø—Ä–æ–¥–∞–∂–µ"
        else:
            response_text = (
                f"‚úÖ {player['displayName']}\n"
                f"üè∑ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {min_price:.2f} ETH\n"
                f"üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {time.strftime('%H:%M:%S')}"
            )
            
        await update.message.reply_text(response_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≥—Ä–æ–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è self-ping
    ping_thread = threading.Thread(target=self_ping, daemon=True)
    ping_thread.start()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)],
        states={
            SELECT_PLAYER: [MessageHandler(filters.TEXT, handle_player_selection)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()